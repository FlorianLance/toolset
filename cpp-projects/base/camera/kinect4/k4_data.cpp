


/*******************************************************************************
** Toolset-base                                                               **
** MIT License                                                                **
** Copyright (c) [2018] [Florian Lance]                                       **
**                                                                            **
** Permission is hereby granted, free of charge, to any person obtaining a    **
** copy of this software and associated documentation files (the "Software"), **
** to deal in the Software without restriction, including without limitation  **
** the rights to use, copy, modify, merge, publish, distribute, sublicense,   **
** and/or sell copies of the Software, and to permit persons to whom the      **
** Software is furnished to do so, subject to the following conditions:       **
**                                                                            **
** The above copyright notice and this permission notice shall be included in **
** all copies or substantial portions of the Software.                        **
**                                                                            **
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR **
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,   **
** FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL    **
** THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER **
** LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING    **
** FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER        **
** DEALINGS IN THE SOFTWARE.                                                  **
**                                                                            **
********************************************************************************/

#include "k4_data.hpp"

using namespace tool::geo;
using namespace tool::camera;

std::tuple<std::uint32_t,std::uint32_t> K4PackedVoxel::pack(const geo::Pt3<int16_t> &pos, const geo::Pt4<uint8_t> &col) noexcept{

    const int x = static_cast<int>(pos.x())+4096;
    const int y = static_cast<int>(pos.y())+4096;
    const int z = static_cast<int>(pos.z());

    std::uint32_t p1 =
        /**  0-0  */((x & 0b1))                     |
        /**  1-0  */((y & 0b1)               << 1)  |
        /**  2-0  */((z & 0b1)               << 2)  |
        /**  3-1  */((x & 0b10)              << 2)  |
        /**  4-1  */((y & 0b10)              << 3)  |
        /**  5-1  */((z & 0b10)              << 4)  |
        /**  6-2  */((x & 0b100)             << 4)  |
        /**  7-2  */((y & 0b100)             << 5)  |
        /**  8-2  */((z & 0b100)             << 6)  |
        /**  9-3  */((x & 0b1000)            << 6)  |
        /** 10-3  */((y & 0b1000)            << 7)  |
        /** 11-3  */((z & 0b1000)            << 8)  |
        /** 12-4  */((x & 0b10000)           << 8)  |
        /** 13-4  */((y & 0b10000)           << 9)  |
        /** 14-4  */((z & 0b10000)           << 10) |
        /** 15-5  */((x & 0b100000)          << 10) |
        /** 16-5  */((y & 0b100000)          << 11) |
        /** 17-5  */((z & 0b100000)          << 12) |
        /** 18-6  */((x & 0b1000000)         << 12) |
        /** 19-6  */((y & 0b1000000)         << 13) |
        /** 20-6  */((z & 0b1000000)         << 14) |
        /** 21-7  */((x & 0b10000000)        << 14) |
        /** 22-7  */((y & 0b10000000)        << 15) |
        /** 23-7  */((z & 0b10000000)        << 16) |
        /** 24-8  */((x & 0b100000000)       << 16) |
        /** 25-8  */((y & 0b100000000)       << 17) |
        /** 26-8  */((z & 0b100000000)       << 18) |
        /** 27-9  */((x & 0b1000000000)      << 18) |
        /** 28-9  */((y & 0b1000000000)      << 19) |
        /** 29-9  */((z & 0b1000000000)      << 20) |
        /** 30-10 */((x & 0b10000000000)     << 20) |
        /** 31-10 */((y & 0b10000000000)     << 21);

    const std::uint8_t r = col.x();
    const std::uint8_t g = col.y();
    const std::uint8_t b = col.z();
    std::uint32_t p2 =
        /** 0-0   */ ((r & 0b1))                    |
        /** 1-0   */ ((g & 0b1)              << 1)  |
        /** 2-0   */ ((b & 0b1)              << 2)  |
        /** 3-1   */ ((r & 0b10)             << 2)  |
        /** 4-1   */ ((g & 0b10)             << 3)  |
        /** 5-1   */ ((b & 0b10)             << 4)  |
        /** 6-2   */ ((r & 0b100)            << 4)  |
        /** 7-2   */ ((g & 0b100)            << 5)  |
        /** 8-2   */ ((b & 0b100)            << 6)  |
        /** 9-3   */ ((r & 0b1000)           << 6)  |
        /** 10-3  */ ((g & 0b1000)           << 7)  |
        /** 11-3  */ ((b & 0b1000)           << 8)  |
        /** 12-4  */ ((r & 0b10000)          << 8)  |
        /** 13-4  */ ((g & 0b10000)          << 9)  |
        /** 14-4  */ ((b & 0b10000)          << 10) |
        /** 15-5  */ ((r & 0b100000)         << 10) |
        /** 16-5  */ ((g & 0b100000)         << 11) |
        /** 17-5  */ ((b & 0b100000)         << 12) |
        /** 18-6  */ ((r & 0b1000000)        << 12) |
        /** 19-6  */ ((g & 0b1000000)        << 13) |
        /** 20-6  */ ((b & 0b1000000)        << 14) |
        /** 21-7  */ ((r & 0b10000000)       << 14) |
        /** 22-7  */ ((g & 0b10000000)       << 15) |
        /** 23-7  */ ((b & 0b10000000)       << 16) |

        /** 24-10 */ ((z & 0b10000000000)    << 14) |
        /** 25-11 */ ((x & 0b100000000000)   << 14) |
        /** 26-11 */ ((y & 0b100000000000)   << 15) |
        /** 27-11 */ ((z & 0b100000000000)   << 16) |
        /** 28-12 */ ((x & 0b1000000000000)  << 16) |
        /** 29-12 */ ((y & 0b1000000000000)  << 17) |
        /** 30-12 */ ((z & 0b1000000000000)  << 18) |
        /** 31-13 */ ((z & 0b10000000000000) << 18);

    return {p1,p2};
}

void K4PackedVoxel::unpack(std::uint32_t p1, std::uint32_t p2, geo::Pt3<int16_t> &pos, geo::Pt3<uint8_t> &col)  noexcept{

    pos.x() = static_cast<int16_t>(
        /* 0  */ ((p1 & 0b1))                                      |
        /* 1  */ ((p1 & 0b1000)                             >> 2)  |
        /* 2  */ ((p1 & 0b1000000)                          >> 4)  |
        /* 3  */ ((p1 & 0b1000000000)                       >> 6)  |
        /* 4  */ ((p1 & 0b1000000000000)                    >> 8)  |
        /* 5  */ ((p1 & 0b1000000000000000)                 >> 10) |
        /* 6  */ ((p1 & 0b1000000000000000000)              >> 12) |
        /* 7  */ ((p1 & 0b1000000000000000000000)           >> 14) |
        /* 8  */ ((p1 & 0b1000000000000000000000000)        >> 16) |
        /* 9  */ ((p1 & 0b1000000000000000000000000000)     >> 18) |
        /* 10 */ ((p1 & 0b1000000000000000000000000000000)  >> 20) |
        /* 11 */ ((p2 & 0b10000000000000000000000000)       >> 14) |
        /* 12 */ ((p2 & 0b10000000000000000000000000000)    >> 16) - 4096);

    pos.y() = static_cast<int16_t>(
        /* 0  */ ((p1 & 0b10)                                >> 1)  |
        /* 1  */ ((p1 & 0b10000)                             >> 3)  |
        /* 2  */ ((p1 & 0b10000000)                          >> 5)  |
        /* 3  */ ((p1 & 0b10000000000)                       >> 7)  |
        /* 4  */ ((p1 & 0b10000000000000)                    >> 9)  |
        /* 5  */ ((p1 & 0b10000000000000000)                 >> 11) |
        /* 6  */ ((p1 & 0b10000000000000000000)              >> 13) |
        /* 7  */ ((p1 & 0b10000000000000000000000)           >> 15) |
        /* 8  */ ((p1 & 0b10000000000000000000000000)        >> 17) |
        /* 9  */ ((p1 & 0b10000000000000000000000000000)     >> 19) |
        /* 10 */ ((p1 & 0b10000000000000000000000000000000)  >> 21) |
        /* 11 */ ((p2 & 0b100000000000000000000000000)       >> 15) |
        /* 12 */ ((p2 & 0b100000000000000000000000000000)    >> 17) - 4096);

    pos.z() = static_cast<int16_t>(
        /* 0  */ ((p1 & 0b100)                               >> 2)  |
        /* 1  */ ((p1 & 0b100000)                            >> 4)  |
        /* 2  */ ((p1 & 0b100000000)                         >> 6)  |
        /* 3  */ ((p1 & 0b100000000000)                      >> 8)  |
        /* 4  */ ((p1 & 0b100000000000000)                   >> 10) |
        /* 5  */ ((p1 & 0b100000000000000000)                >> 12) |
        /* 6  */ ((p1 & 0b100000000000000000000)             >> 14) |
        /* 7  */ ((p1 & 0b100000000000000000000000)          >> 16) |
        /* 8  */ ((p1 & 0b100000000000000000000000000)       >> 18) |
        /* 9  */ ((p1 & 0b100000000000000000000000000000)    >> 20) |
        /* 10 */ ((p2 & 0b1000000000000000000000000)         >> 14) |
        /* 11 */ ((p2 & 0b1000000000000000000000000000)      >> 16) |
        /* 12 */ ((p2 & 0b1000000000000000000000000000000)   >> 18) |
        /* 13 */ ((p2 & 0b10000000000000000000000000000000)  >> 19));

    col.x() = static_cast<uint8_t>(
        /* 0  */ ((p2 & 0b1))                                     |
        /* 1  */ ((p2 & 0b1000)                            >> 2)  |
        /* 2  */ ((p2 & 0b1000000)                         >> 4)  |
        /* 3  */ ((p2 & 0b1000000000)                      >> 6)  |
        /* 4  */ ((p2 & 0b1000000000000)                   >> 8)  |
        /* 5  */ ((p2 & 0b1000000000000000)                >> 10) |
        /* 6  */ ((p2 & 0b1000000000000000000)             >> 12) |
        /* 7  */ ((p2 & 0b1000000000000000000000)          >> 14));

    col.y() = static_cast<uint8_t>(
        /* 0  */ ((p2 & 0b10)                              >> 1)  |
        /* 1  */ ((p2 & 0b10000)                           >> 3)  |
        /* 2  */ ((p2 & 0b10000000)                        >> 5)  |
        /* 3  */ ((p2 & 0b10000000000)                     >> 7)  |
        /* 4  */ ((p2 & 0b10000000000000)                  >> 9)  |
        /* 5  */ ((p2 & 0b10000000000000000)               >> 11) |
        /* 6  */ ((p2 & 0b10000000000000000000)            >> 13) |
        /* 7  */ ((p2 & 0b10000000000000000000000)         >> 15));

    col.z() = static_cast<uint8_t>(
        /* 0  */ ((p2 & 0b100)                             >> 2)  |
        /* 1  */ ((p2 & 0b100000)                          >> 4)  |
        /* 2  */ ((p2 & 0b100000000)                       >> 6)  |
        /* 3  */ ((p2 & 0b100000000000)                    >> 8)  |
        /* 4  */ ((p2 & 0b100000000000000)                 >> 10) |
        /* 5  */ ((p2 & 0b100000000000000000)              >> 12) |
        /* 6  */ ((p2 & 0b100000000000000000000)           >> 14) |
        /* 7  */ ((p2 & 0b100000000000000000000000)        >> 16));
}

std::uint64_t K4PackedVoxel::pack64(const geo::Pt3<int16_t> &pos, const geo::Pt4<uint8_t> &col){

    // 0  x0  y0  z0  r0  g0  b0
    // 6  x1  y1  z1  r1  g1  b1
    // 12 x2  y2  z2  r2  g2  b2
    // 18 x3  y3  z3  r3  g3  b3
    // 24 x4  y4  z4  r4  g4  b4
    // 30 x5  y5  z5  r5  g5  b5
    // 36 x6  y6  z6  r6  g6  b6
    // 42 x7  y7  z7  r7  g7  b7
    // 48 x8  y8  z8  x9  y9  z9
    // 54 x10 y10 z10 x11 y11 z11
    // 60 x12 y12 z12 z13

    const int x = static_cast<int>(pos.x())+4096;
    const int y = static_cast<int>(pos.y())+4096;
    const int z = static_cast<int>(pos.z());
    const std::uint8_t r = col.x();
    const std::uint8_t g = col.y();
    const std::uint8_t b = col.z();

    using t = std::uint64_t;
    return t{
        /**  0-0  */ (t(x & 0b1))                       |
        /**  1-0  */ (t(y & 0b1)                 <<  1) |
        /**  2-0  */ (t(z & 0b1)                 <<  2) |
        /**  3-0  */ (t(r & 0b1)                 <<  3) |
        /**  4-0  */ (t(g & 0b1)                 <<  4) |
        /**  5-0  */ (t(b & 0b1)                 <<  5) |
        /**  6-1  */ (t(x & 0b10)                <<  5) |
        /**  7-1  */ (t(y & 0b10)                <<  6) |
        /**  8-1  */ (t(z & 0b10)                <<  7) |
        /**  9-1  */ (t(r & 0b10)                <<  8) |
        /** 10-1  */ (t(g & 0b10)                <<  9) |
        /** 11-1  */ (t(b & 0b10)                << 10) |
        /** 12-2  */ (t(x & 0b100)               << 10) |
        /** 13-2  */ (t(y & 0b100)               << 11) |
        /** 14-2  */ (t(z & 0b100)               << 12) |
        /** 15-2  */ (t(r & 0b100)               << 13) |
        /** 16-2  */ (t(g & 0b100)               << 14) |
        /** 17-2  */ (t(b & 0b100)               << 15) |
        /** 18-3  */ (t(x & 0b1000)              << 15) |
        /** 19-3  */ (t(y & 0b1000)              << 16) |
        /** 20-3  */ (t(z & 0b1000)              << 17) |
        /** 21-3  */ (t(r & 0b1000)              << 18) |
        /** 22-3  */ (t(g & 0b1000)              << 19) |
        /** 23-3  */ (t(b & 0b1000)              << 20) |
        /** 24-4  */ (t(x & 0b10000)             << 20) |
        /** 25-4  */ (t(y & 0b10000)             << 21) |
        /** 26-4  */ (t(z & 0b10000)             << 22) |
        /** 27-4  */ (t(r & 0b10000)             << 23) |
        /** 28-4  */ (t(g & 0b10000)             << 24) |
        /** 29-4  */ (t(b & 0b10000)             << 25) |
        /** 30-5  */ (t(x & 0b100000)            << 25) |
        /** 31-5  */ (t(y & 0b100000)            << 26) |
        /** 32-5  */ (t(z & 0b100000)            << 27) |
        /** 33-5  */ (t(r & 0b100000)            << 28) |
        /** 34-5  */ (t(g & 0b100000)            << 29) |
        /** 35-5  */ (t(b & 0b100000)            << 30) |
        /** 36-6  */ (t(x & 0b1000000)           << 30) |
        /** 37-6  */ (t(y & 0b1000000)           << 31) |
        /** 38-6  */ (t(z & 0b1000000)           << 32) |
        /** 39-6  */ (t(r & 0b1000000)           << 33) |
        /** 40-6  */ (t(g & 0b1000000)           << 34) |
        /** 41-6  */ (t(b & 0b1000000)           << 35) |
        /** 42-7  */ (t(x & 0b10000000)          << 35) |
        /** 43-7  */ (t(y & 0b10000000)          << 36) |
        /** 44-7  */ (t(z & 0b10000000)          << 37) |
        /** 45-7  */ (t(r & 0b10000000)          << 38) |
        /** 46-7  */ (t(g & 0b10000000)          << 39) |
        /** 47-7  */ (t(b & 0b10000000)          << 40) |
        /** 48-8  */ (t(x & 0b100000000)         << 40) |
        /** 49-8  */ (t(y & 0b100000000)         << 41) |
        /** 50-8  */ (t(z & 0b100000000)         << 42) |
        /** 51-9  */ (t(x & 0b1000000000)        << 42) |
        /** 52-9  */ (t(y & 0b1000000000)        << 43) |
        /** 53-9  */ (t(z & 0b1000000000)        << 44) |
        /** 54-10 */ (t(x & 0b10000000000)       << 44) |
        /** 55-10 */ (t(y & 0b10000000000)       << 45) |
        /** 56-10 */ (t(z & 0b10000000000)       << 46) |
        /** 57-11 */ (t(x & 0b100000000000)      << 46) |
        /** 58-11 */ (t(y & 0b100000000000)      << 47) |
        /** 59-11 */ (t(z & 0b100000000000)      << 48) |
        /** 60-12 */ (t(x & 0b1000000000000)     << 48) |
        /** 61-12 */ (t(y & 0b1000000000000)     << 49) |
        /** 62-12 */ (t(z & 0b1000000000000)     << 50) |
        /** 63-13 */ (t(z & 0b10000000000000)    << 50)
    };
}

void K4PackedVoxel::unpack64(uint64_t p, geo::Pt3<int16_t> &pos, geo::Pt4<uint8_t> &col){

    pos.x() = static_cast<int16_t>(
        /* 0  */ ((p & 0b1))                                                                      |
        /* 1  */ ((p & 0b1000000)                                                          >> 5)  |
        /* 2  */ ((p & 0b1000000000000)                                                    >> 10) |
        /* 3  */ ((p & 0b1000000000000000000)                                              >> 15) |
        /* 4  */ ((p & 0b1000000000000000000000000)                                        >> 20) |
        /* 5  */ ((p & 0b1000000000000000000000000000000)                                  >> 25) |
        /* 6  */ ((p & 0b1000000000000000000000000000000000000)                            >> 30) |
        /* 7  */ ((p & 0b1000000000000000000000000000000000000000000)                      >> 35) |
        /* 8  */ ((p & 0b1000000000000000000000000000000000000000000000000)                >> 40) |
        /* 9  */ ((p & 0b1000000000000000000000000000000000000000000000000000)             >> 42) |
        /* 10 */ ((p & 0b1000000000000000000000000000000000000000000000000000000)          >> 44) |
        /* 11 */ ((p & 0b1000000000000000000000000000000000000000000000000000000000)       >> 46) |
        /* 12 */ ((p & 0b1000000000000000000000000000000000000000000000000000000000000)    >> 48) - 4096);

    pos.y() = static_cast<int16_t>(
        /* 0  */ ((p & 0b10)                                                               >> 1)  |
        /* 1  */ ((p & 0b10000000)                                                         >> 6)  |
        /* 2  */ ((p & 0b10000000000000)                                                   >> 11) |
        /* 3  */ ((p & 0b10000000000000000000)                                             >> 16) |
        /* 4  */ ((p & 0b10000000000000000000000000)                                       >> 21) |
        /* 5  */ ((p & 0b10000000000000000000000000000000)                                 >> 26) |
        /* 6  */ ((p & 0b10000000000000000000000000000000000000)                           >> 31) |
        /* 7  */ ((p & 0b10000000000000000000000000000000000000000000)                     >> 36) |
        /* 8  */ ((p & 0b10000000000000000000000000000000000000000000000000)               >> 41) |
        /* 9  */ ((p & 0b10000000000000000000000000000000000000000000000000000)            >> 43) |
        /* 10 */ ((p & 0b10000000000000000000000000000000000000000000000000000000)         >> 45) |
        /* 11 */ ((p & 0b10000000000000000000000000000000000000000000000000000000000)      >> 47) |
        /* 12 */ ((p & 0b10000000000000000000000000000000000000000000000000000000000000)   >> 49) - 4096);

    pos.z() = static_cast<int16_t>(
        /* 0  */ ((p & 0b100)                                                              >> 2)  |
        /* 1  */ ((p & 0b100000000)                                                        >> 7)  |
        /* 2  */ ((p & 0b100000000000000)                                                  >> 12) |
        /* 3  */ ((p & 0b100000000000000000000)                                            >> 17) |
        /* 4  */ ((p & 0b100000000000000000000000000)                                      >> 22) |
        /* 5  */ ((p & 0b100000000000000000000000000000000)                                >> 27) |
        /* 6  */ ((p & 0b100000000000000000000000000000000000000)                          >> 32) |
        /* 7  */ ((p & 0b100000000000000000000000000000000000000000000)                    >> 37) |
        /* 8  */ ((p & 0b100000000000000000000000000000000000000000000000000)              >> 42) |
        /* 9  */ ((p & 0b100000000000000000000000000000000000000000000000000000)           >> 44) |
        /* 10 */ ((p & 0b100000000000000000000000000000000000000000000000000000000)        >> 46) |
        /* 11 */ ((p & 0b100000000000000000000000000000000000000000000000000000000000)     >> 48) |
        /* 12 */ ((p & 0b100000000000000000000000000000000000000000000000000000000000000)  >> 50) |
        /* 13 */ ((p & 0b1000000000000000000000000000000000000000000000000000000000000000) >> 50));

    col.x() = static_cast<uint8_t>(
        /* 0  */ ((p & 0b1000)                                                             >> 3)  |
        /* 1  */ ((p & 0b1000000000)                                                       >> 8)  |
        /* 2  */ ((p & 0b1000000000000000)                                                 >> 13) |
        /* 3  */ ((p & 0b1000000000000000000000)                                           >> 18) |
        /* 4  */ ((p & 0b1000000000000000000000000000)                                     >> 23) |
        /* 5  */ ((p & 0b1000000000000000000000000000000000)                               >> 28) |
        /* 6  */ ((p & 0b1000000000000000000000000000000000000000)                         >> 33) |
        /* 7  */ ((p & 0b1000000000000000000000000000000000000000000000)                   >> 38));

    col.y() = static_cast<uint8_t>(
        /* 0  */ ((p & 0b10000)                                                            >> 4)  |
        /* 1  */ ((p & 0b10000000000)                                                      >> 9)  |
        /* 2  */ ((p & 0b10000000000000000)                                                >> 14) |
        /* 3  */ ((p & 0b10000000000000000000000)                                          >> 19) |
        /* 4  */ ((p & 0b10000000000000000000000000000)                                    >> 24) |
        /* 5  */ ((p & 0b10000000000000000000000000000000000)                              >> 29) |
        /* 6  */ ((p & 0b10000000000000000000000000000000000000000)                        >> 34) |
        /* 7  */ ((p & 0b10000000000000000000000000000000000000000000000)                  >> 39));

    col.z() = static_cast<uint8_t>(
        /* 0  */ ((p & 0b100000)                                                           >> 5)  |
        /* 1  */ ((p & 0b100000000000)                                                     >> 10) |
        /* 2  */ ((p & 0b100000000000000000)                                               >> 15) |
        /* 3  */ ((p & 0b100000000000000000000000)                                         >> 20) |
        /* 4  */ ((p & 0b100000000000000000000000000000)                                   >> 25) |
        /* 5  */ ((p & 0b100000000000000000000000000000000000)                             >> 30) |
        /* 6  */ ((p & 0b100000000000000000000000000000000000000000)                       >> 35) |
        /* 7  */ ((p & 0b100000000000000000000000000000000000000000000000)                 >> 40));
}

Pt4<uint8_t> K4PackedVoxel::pack_xy(std::int16_t x, std::int16_t y){
    Pt4<uint8_t> c;

    c.x() =
        /* 0 */((x & 0b1))                    |
        /* 1 */((x & 0b100)             >> 1) |
        /* 2 */((x & 0b10000)           >> 2) |
        /* 3 */((x & 0b1000000)         >> 3) |
        /* 4 */((x & 0b100000000)       >> 4) |
        /* 5 */((x & 0b10000000000)     >> 5) |
        /* 6 */((x & 0b1000000000000)   >> 6) |
        /* 7 */((x & 0b100000000000000) >> 7);

    c.y() =
        /* 0 */((y & 0b1))                    |
        /* 1 */((y & 0b100)             >> 1) |
        /* 2 */((y & 0b10000)           >> 2) |
        /* 3 */((y & 0b1000000)         >> 3) |
        /* 4 */((y & 0b100000000)       >> 4) |
        /* 5 */((y & 0b10000000000)     >> 5) |
        /* 6 */((y & 0b1000000000000)   >> 6) |
        /* 7 */((y & 0b100000000000000) >> 7);

    c.z() =
        /* 0 */((x & 0b10)              >> 1) |
        /* 1 */((x & 0b1000)            >> 2) |
        /* 2 */((x & 0b100000)          >> 3) |
        /* 3 */((x & 0b10000000)        >> 4) |
        /* 4 */((x & 0b1000000000)      >> 5) |
        /* 5 */((x & 0b100000000000)    >> 6) |
        /* 6 */((x & 0b10000000000000)  >> 7) |
        /* 7 */((x & 0b1000000000000000)>> 8);

    c.w() =
        /* 0 */((y & 0b10)              >> 1) |
        /* 1 */((y & 0b1000)            >> 2) |
        /* 2 */((y & 0b100000)          >> 3) |
        /* 3 */((y & 0b10000000)        >> 4) |
        /* 4 */((y & 0b1000000000)      >> 5) |
        /* 5 */((y & 0b100000000000)    >> 6) |
        /* 6 */((y & 0b10000000000000)  >> 7) |
        /* 7 */((y & 0b1000000000000000)>> 8);

    return c;
}
